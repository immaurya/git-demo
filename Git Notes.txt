GIT = Global Information Tracker
VCS = Version Control System
A repository will contain all the files related to specific project or application, also contain history of changes & any special configurations
collection of version control files are kept together in Repository
within the working directory, a hidden folder called .git folder that contains the actual git repository
git repository manages the git commit history that is all the changes that are finalized in prominantly part of the git repository  
working directory is a directory/folder on computer that holds all the project or application files, files within the working directory may or may not managed by git
Staging area also reffered as git index that is a holding area for queueing up changes for the next commit

branches are timeline that contains your changes, in git branches contain commits


================================================== Git Installation ==================================================
git-for-windows.github.io > download > run git > tick on additional icon > use git from window command prompt > checkout command unix  style > use mainTTY > Install
for mac installation => open terminal > git version > Install > Done > close terminal > open terminal > git version


================================================== Git Quick Start ==================================================
https://github.com > sign up > login > click on user name > click on github icon > New repository > name as github-demo > Public > tick on README > create repository
pwd > mkdir projects > cd projects > git version
git config --global user.name "Abe lincoin" > git config --global user.email "mrabe@git.training" (To make GIT Account, need to set Name & E-mail)
git config --global --list
copy HTTPS clone URL by clicking on icon > git clone https://github.com/prezlincoin/github-demo.git (To copy git repository from github to local system)
cd github-demo > ls > git status
echo "Test Git Quick Start demo" >> start.txt > cat start.txt > git status > git add start.txt > git commit -m "Adding start text file" > git status
refresh browser(can't see start.txt file) > git push origin master(via command line) > refresh on browser (can see start.txt file)

working directory is where we do all the work and get monitor for changes
untracked file as a file in the working directory that hasn't been added to git yet
the staging area is designed to allow you to build up several related changes
origin refers to the GitHub copy of our repository, and master refers to our default and only brancch in the repository

Basic Git Workflow Life Cycle(Local) => Working Directory > Staging Area > Repository (.git folder)	=> Remote
git required 2 specific information that is name & email address


================================================== Text Editor Installation ==================================================
notepad-plus-plus.org > Download > run/install program > tick on create shortcut on desktop > Install
open git bash > notepad++(type) > C/Program Files(x86)/Notepad++ > click on address bar then copy path
right click on This PC > Properties > Advanced system setting > Environment Variables(Advance) > select path > edit > ; then paste path of notepad in value(last) > ok
open git bash > notepad++ (and it opened, means we have configured notepad++ to run from within command environment)

git bash > notepad++ .bash_profile > alias npp='notepad++.exe -multiInst -nosession' > Ctrl+w > close git (integrate git bash with notepad++ by creating bash alias)
open git bash > npp [it will open blank notepad++ means shortcut(alias) created]
cat ~/.gitconfig (current global configuration, can check user's name/email)
git config --global core.editor "notepad++.exe --multiInst -nosession" > git config --global --list
git config --global -e (to edit the config file)
[notepad++ filename (to create file via file editor notepad++ instead of vi)]

For Mac OS => macromates.com > Download > click textmate2 to download > install > open textmate > right click on textmate icon > option > keep in Dock > close all file
open terminal > mate > Textmate tab > Preferences > Terminal > Install > open terminal > mate (open, means configured Textmate to run from within command environment)

git config --global core.editor "mate -w" > git config --global -e
open textmate > This is a test > save(command s) & close > mate .tm_properties(write below script)
# General Setting
fontName = "Menlo"
fontSize = 24

mate .tm_properties (to check script has written)


================================================== Basic Git Commands ==================================================
cd projects > git init fresh-project > ls > cd fresh-project > ls -al > cd .git/ > cd .. > git status
mate hipster.txt > copy & paste text > save, close > git status > git add hipster.txt > git status > git commit > write > git status > rm -rf fresh-product

=====Existing Project - Add Git to your code =====
www.initializr.com > Bootstrap > Download > open > unzip ~/Downloads/initializr-verekia-4.0.zip > ls > mv initializr web-project > cd web-project > git init > ls-al
git status > git add .(add all files) > git status > git commit -m "My first commit, inline"(commit command use commit message with -m option instead of text editor)
rm -rf .git > cd .. > rm -rf web-project

===== Start on GitHub - Fork and Clone(18:41) =====
http://bitly.com/git-start-web > click on Fork > select awsomejt > copy clone url > cd projects > git clone paste clone url > cd starter-web > ls -al > cd .git/

===== Basic Workflow - Add, Commit, Push(25:25) =====
cd starter-web > mate hipster.txt > paste some text > git status > git add hipster.text > git status > git commit > write message > git pull origin master > now push

===== Tracked Files(39:03) =====
mate ~/.gitconfig > changed name & email > 
mate hipster.txt > copy & paste text > git commit -am "Adding more ipsum text" > git ls-files (list of all tracked files)
mate newfile.txt > write text & save > ls > git status > git ls-files (newfile is not listed/tracked) > git add newfile.txt > git status > git ls-files

===== Editing Files(45:10) =====
mate hipster.txt > copy/paste text > git status > git commit -m "Adding new file" > git add hipster.txt > git status > mate hipster.txt > copy/paste > git status > git add hipster.txt > git commit -m "More ipsum for hipsters" > git status 

===== Recursive Add - Add lots of file quickly(50:01) =====
mkdir -p level1/level2/level3 > ls > cd level1 > mate level1-file.txt > copy/paste > ls > cd level2 > mate level2-file.txt > copy/paste > cd level3 > mate level3-file.txt > copy/paste > ls > cd ../../.. > ls > git status > git add . > git status (all level's file added to staging) > git commit

===== Backing Out Changes(55:02) =====
cd level1 > mate level1-file.txt > copy/paste > git status > git add level1-file.txt > git status > git reset HEAD level1-file.txt (to backout changes) > git status > 
> git checkout -- level1-file.txt(to discard change in working directory) > git status (now working directory is clean) > mate level1-file.txt(same file before paste)

===== Renaming Files and Moving Files(1:00:22) =====
cd level1/level2/level3 > ls > git mv level3-file.txt level3.txt (to rename file) > ls > git status > git commit -m "renaming level3 file"
cd level1/level2 > mv level2-file.txt level2.txt(renaming file without git cmnd but with bash) > git status > git add -A(to apply updates) > git commit > write text 
cd level1/level2 > git mv level2.txt 2.txt > git status > git mv 2.txt level2.txt (to name old file) > git status > git mv level2.txt level3 (file transferred to level3) > git status > git commit 	mv level2.txt ..(to move file into previous directory by bash) > git status > git add -A > git status > git commit
changed level1's file to level1.txt by finder(in window) > git status > git add level1.txt > git add -u(u = git understand file renameed) > git status > git commit

===== Deleting Files(1:13:41) =====
mate doomed.txt > write text > ls > git status > git rm doomed.txt(unable to delete cos git hasn't any record/track) > rm doomed.txt
git ls-files > git rm newfile.txt (deleted tracked file) > git status > git commit -m "Deleting new file" > git status
git rm hipster.txt > ls > git status > git reset HEAD hipster.txt(to undo delete temp) > ls > git status > git checkout -- hipster.txt(restore deleted file) > ls 
rm hipster.txt > ls > git status > git add -A > git status > git commit > git status
rm -rf level1 > ls > git status > git add -A > git status > git commit -m "deleting level1 and all children" (remove entire folder structure) > git status

===== History - one darn thing after another(1:26:05) =====
git help log > git status > git log (view log history) > git log --abbrev-commit (short commid unique id) > git log --oneline --graph --decorate(view log in 1 line)
git log ae6f872...761b911 (view between ranged logs) > git log --since="3 days ago"(view last 3 days logs) > git log -- hipster.txt(view exact file log)
git log --follow -- level1/level2/level2.txt > git show commit-id (view particular commit details)

===== Git Alias - Long commands, but shorter(1:34:02) =====
git config --global alias.hist "log --all --graph --decorate --oneline" (created alias/shortcut) > git hist (to confirm alias working)
mate ~/.gitconfig (to check located file of alias, if wish can edit alias here)

===== Git Ignore - Avoid unwanted files(1:39:13) =====
git status (see untracked file - .DS_Store) > mate .gitignore(untrack unwanted file) > write .DS_Store > ls > git status > git add .gitignore > git status > git commit
mate access.log (paste below script) [create log file that would replicate what apache might doing] > git status > mate .gitignore (*.log) [* = all] > git status 
/index.html 200
/somethingelse.html 404
/hackattempt.php 500

mkdir log > mv access.log log > cd log > cp access.log access.04-11 > git status > mate .gitignore (log/) > git status > git commit -am "Excluding log file directory"

===== Cleanup and Push to Github(1:48:20) =====
git pull origin master > git push origin master > reload github page (received files from local system to github) 	[it's better to pull first then push]


================================================== Visual Merge - Diff Tool Installation ==================================================
===== Compare / Merge Tool Overview =====
perforce.com > Downloads > P4MERGE:VISUAL MERGE TOOL > select os as 64 bit > Download > run/install > diselect all item except P4MERGE > Finish

===== P4MERGE Configure on Windows(3:17) =====
git bash > p4merge(type) > C/Program Files/Perforce > copy address-bar > properties of PC > Advance system setting > Environment variable > paste in path with ;
git bash > p4merge(type) > a pop up will come with Diff/Merge tool

===== P4MERGE for Windows Git Configuration(7:10) =====
git config --global merge.tool p4merge >git config --global mergetool.p4merge.path "C:/Program Files/Perforce/p4merge.exe" > git config --global mergetool.prompt false
git config --global diff.tool p4merge > git config --global difftool.p4merge.path "C:/Program Files/Perforce/p4merge.exe" > git config --global difftool.prompt false
git config --global --list > git config --global -e

using git config command i'm going to configure git to use p4merge as the diff tool and as a merge resolution tool (git config --global merge.tool p4merge)
git not to prompt whether not to launch p4merge everytime we need a result conflict (git config --global mergetool.prompt false)


===== P4MERGE Installation for MAC(11:51) =====
perforce.com > Download > P4MERGE:VISUAL MERGE TOOL > select os as MAC OS 10.8 64bit > Download > Download folder > Drag p4merge into Application

===== P4MERGE - Configure with Git(13:54) =====
cd /Applications/p4merge.app/Contents/MacOS/ > ls > ls -al > ./p4merge > pwd > cd > git config --global diff.tool p4merge > git config --global difftool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge > git config --global difftool.prompt false

git config --global merge.tool p4merge > git config --global mergetool.p4merge.path /Applications/p4merge.app/Contents/MacOS/p4merge > git config --global mergetool.prompt false
git config --global --list > git config --global -e


================================================== Comparisons ==================================================
mate README.md > paste below script > git status > git add README.md > git commit -m "Adding" > git push origin master > refresh browser > README.md > click raw tab
#Starter Web Project
## Introduction
## Purpose
## How to Contribute

mate README.md > ## Deployment (above Contribute) > git commit -am " Adding new section: Deployment" > git status > git push > refresh browser > README.md

mate README.md > This is a simple website project for showing how  to use Git & GitHub together (under web project)> git status > git commit -am "Adding description"
mate README.md > This example is to show different parts of git repository & commands in a web project (under Introduction) > git commit -am "Adding Introduction text"
mate README.md > The main purpose is to provide simple examples for Git traing demos (under Purpose) > git add README.md > git status
mate README.md > Deployment can be on any web server or even local file system (under Deployment) > git status	

===== Comparisions - Working Dir vs Staging Area (7:20)=====
git diff > git difftool(show difference between working dir & staging area)

===== Comparisions - Working Dir vs Repository(10:27) =====
git status > git diff HEAD > git difftool HEAD 

===== Comparisions - Staging area vs Git Repository(12:35) =====
git diff --staged HEAD > git difftool --staged HEAD

===== Comparisions - Limit to One File(14:40) =====
ls > mate simple.html > <title> Simple Title </title> > git status > git diff > git diff -- README.md > git difftool -- README.md

===== Comparisions between Commits(17:01) =====
git log --oneline > git diff commit-id HEAD > git diff HEAD HEAD^ > git difftool HEAD HEAD^ > git log --oneline > git diff commit-id1 commit-id2
git difftool commit-id1 commit-id2

===== Comparisions - Local vs Remote(22:52) =====
git diff master origin/master > git difftool master origin/master

===== Comparision Section Cleanup(25:20) =====
git status > git add . > git status > git commit -m "Updating repo with changes from compare section" > git status > git pull > git push origin master


================================================== Branching & Merging ==================================================
git branch -a > git branch mynewbranch > git branch -a > git checkout mynewbranch (switch to branch) > git branch -a > git log --oneline --decorate
git checkout master > git branch -m mynewbranch newbranch (m= move/rename) > git branch -a > git branch -d newbranch (d = delete) > git branch -a

===== Branching & Merging - Happy Path:Fast Forward(5:58) =====
git checkout -b title-change(create branch before switch) > git status > mate simple.html > An Example Website(between title) > git commit -am "Changing title of file" 
git log --oneline > git checkout master > git diff master title-change > git difftool master title-change > git merge title-change
git log --oneline --graph --decorate > git branch > git branch -d title-change > git branch > git log --oneline --graph --decorate

===== Happy Path w/o Fast Forwarding =====
git checkout -b add-copyright > git branch > mate simple.html (paste below script) > git commit -am "Adding copyright notice"
<!--
	Copyright 2014 Git.Training
-->

mate README.md (paste below script) > git commit -am "Adding copyright notice to Readme" > git log --oneline --graph --decorate > git checkout master
### Copyright
2014 Git.Training

git merge add-copyright --no-ff > git log --oneline --graph --decorate > git branch -d add-copyright

===== Automatic Merges(19:26) =====
git checkout -b simple-changes > mate humans.txt(delete twitter line & paste script) > git status > git commit -am "Adding team member to humans.txt" > checkout master
Jason Taylor	jason@git.trainig	@awsomejt

mate README.md > please fork this repository then pull request(Contribute) > git commit -am "Adding instructions on contribute" > git log --oneline --graph --decorate
git merge simple-changes -m "Merging changes from simple-changes branch" > git branch > git branch -d simple-changes > mate humans.txt > mate README.md(same text)

===== Merge Conflict & Resolution(26:03) =====
git checkout -b realwork > mate simple.html > replace company with Git Training 2014 & Just some Content with Some interesting stuff goes here & title with great Webs
git commit -am "Making changes to simple.html" > git checkout master
mate simple.html > replace title with respectfull site & company with 2014 Jason Taylor > git add simple.html > git commit(adding conflicting changes)
git log --oneline --graph --decorate --all > git diff master realwork > git difftool master realwork > git merge realwork (error:automatic merge failed; fix conflicts)
mate simple.html (can see the conflicted lines) > git mergetool(click on blue/yellow/green icon to select exact line) > git commit -m "Done resolving merge conflicts"
git status > mate .gitignore (*.orig) > git add .gitignore > git commit -m "updating ignore file to exclude merge temp files" > git branch -d realwork
git log --oneline --graph --decorate --all

===== Section Cleanup(40:23) =====
git status > git branch > git pull origin master > git push origin master > refresh browser to see file received 


================================================== Rebasing ==================================================
Rebasing - Simple Example
git checkout -b myfeature > mate human.txt > Thanks to all my students > git commit -am " Thanks to all my students" > git checkout master
mate README.md > Adding a line for rebasing example > git commit -am "Adding oneliner to readme for rebase example" > git log --oneline --graph --decorate --all
git checkout myfeature > git rebase master > git log --oneline --graph --decorate --all > mate README.md > then more changes from myfeature branch too.
git commit -am "Adding another change after rebase" > git log --oneline --graph --decorate --all > git checkout master 
mate README.md > git diff master myfeature > git merge myfeature > git log --oneline --graph --decorate --all > git branch -d mybranch

===== Setup for rebasing conflict(9:29) =====
mate simple.html > Adding changes before rebasing conflicts > git commit -am "mb before rebase conflicts" > git checkout -b bigtrouble
mate simple.html > replace Adding changes line by These changes are from the feature branch bigtrouble enter Just nothing but trouble
git commit -am "fb adding some trouble to simple html" > git checkout master > mate simple.html > replace Adding changes line by some silly changes from master branch
enter junk filler content enter we should replace this enter jason taylor > git commit -am "mb conflicting changes brewing" > git log --oneline --graph --decorate

===== Rebasing - Abort (12:20) ===== 
git checkout bigtrouble > git difftool master bigtrouble > git rebase master > git rebase --abort > git log --oneline --graph --decorate --all

===== Rebasing - Conflict & Resolution (14:38) =====
git rebase master > git mergetool > pick exact changes > git add simple.html > git rebase --continue > git log --oneline --graph --decorate --all
mate simple.html > delete some silly line enter Trouble in little repo > git commit -am "Adding changes after rebasing conflict" > git log --oneline --graph --decorate
git checkout master > git merge bigtrouble > git log --oneline --graph --decorate --all

===== Rebasing - Remote Branches[GitHub](19:13) =====
git pull then push > mate simple.html > Git.Training, All rights reserved > git commit -am "local:updating simple.html copyright notice"  
Browser > edit index.html > replace Sign by Login(Line:48) > remote:minor change to index.html file (in commit section) > commit change
git status > git fetch origin master > git status 
git pull --rebase origin master > git status > git log --oneline --graph --decorate

===== Rebasing - Section Cleanup(24:40) =====
git branch -d bigtrouble > git pull origin master > git push origin master


================================================== Stashing ==================================================
===== Stashing - Simple Example =====
mate simple.html > replace trouble line by Updating title for stash example > git status > git stash > git status > mate simple.html (can see old trouble line)
mate README.md > All rights reserved > git status > git commit -am "Quick fix in production to improve copyright notice" > git status
git stash apply > git status > mate simple.html(can see new Updating line) > replace we should line by Adding more important content here
git commit -am "Done with simple.html updates" > git status > git stash list > git stash drop

===== Stashing untracked files and using Pop (6:51) =====
git stash command will only stash tracked file > git ls-files > mate human.txt > please leave a review > mate newfile.txt >this is a new file > git status
git stash > git status > git stash apply > git stash drop > git stash list > git stash -u (u = include any untracked file) > git status > git stash list
mate README.md > replace myfeature line by Updating for emergency fix after stashing > git commit -a(Quick fix after stash on README file)

git stash pop > git status > rm newfile.txt > git status > git commit -am "Updates to human file after stash pop" > git status 

===== Managing multiple stash(13:25) =====
mate simple.html > Updating title for muultiple example > git stash save "simple changes" > mate index.html > Adding title for stash example(line9)
git stash save "index changes" > mate README.md > replace emergency fix line by making change for multiple stash example > git stash save "Readme changes"
git stash list > git stash show stash@{1} > git status > git stash apply stash@{1} > git status > git stash list > git stash drop stash@{1} > git stash list
git stash clear (clear all stashes)

===== Stashing - Stash to a Branch(20:17) =====
git status > git stash list > mate simple.html > Updating title for stash Branch example > mate human.txt > Git > git status > git add index.html > git status
mate new.md > # New File enter Random contents > git status > git stash -u > git status > git stash branch newchanges > git stash list > git status
rm new.md > git add . > git commit (changes after git-stash-branch command) > git checkout master > git merge newchanges > git branch -d newchanges

===== Section Cleanup and push to GitHub(27:03) =====
git status > git pull then push > refresh browser to receive files


================================================== tagging ==================================================
===== Simple Tag Example / Lightweight Tags =====
tag = label 
git tag myTag > git log --oneline --graph --decorate --all > git tag --list > git show myTag > git tag --delete myTag > git tag --list > git log --oneline --graph

===== Annotated Tags - Tags with information(4:35) =====
git tag -a v-1.0 > Release 1.0 > git tag --list > git log --oneline --graph --decorate --all > git show v-1.0

===== Comparing Tags(7:47) =====
git tag --list > mate index.html > replace title for Stash line by title for tagging example > git commit -a (Tweaking file for tagging example) > git log --oneline
git tag -a v-1.1 > Release 1.1 > mate simple.html > replace Stash by Tagging Compare > git commit -am "Updating for tag 1.1" > git commit --amend(updating for tag 1.2)
git tag v-1.2 -m "Realease 1.2" > git tag --list > git log --oneline --graph --decorate > git diff v-1.0 v-1.2 > git difftool v-1.0 v-1.2

===== Tagging a specific Commit(14:18) =====
git log --oneline --graph > git tag -a v-0.9-beta commit-id (beta release 0.9) > git log --oneline --graph (can see associated tag)
git tag -a v-0.8-alpha commit-id (Alpha Release 0.8) > git log --oneline --graph(can see associated tag) 

===== Updating Tags (16:42) =====
git tag -a v-0.8-alfa -f commit-id > Alpha Release 0.8 (corrected) > git log --oneline --graph

===== Using Tags with GitHub(18:48) ======
git tag --list > git log --oneline --graph > Go to browser > releases > Tags > Go to terminal > git push origin v-0.9-beta > refresh on release page (see pushed tag)
git push origin v-1.1 > Go to browser > releases > Tags > refresh on release page (see pushed tag)
git push origin master --tags > Go to browser > refresh on release page (see all pushed tag) > git tag list
git push origin :v-0.8-alpha (delete tag from GitHub) > Go to browser > refresh on release page (can't see alpha tag on GitHub means alpha taghas been deleted) 


================================================== Bonus Office Hour Sessions ================================================== 
===== Reset and Reflog =====
cd words > git log --oneline --graph --decorate --all > git reset HEAD^1 >  git log --oneline --graph --decorate --all > git reset HEAD^ > git log --oneline --graph
git reset HEAD^1 > git log --oneline --graph --decorate --all > git reflog > git reset commit-id > git log --oneline --graph --decorate --all
git reset HEAD@{2} > git log --oneline --graph --decorate > git reset commit-id > git log --oneline --graph --decorate > git reset HEAD^^ > git log --oneline --graph
git reset commit-id > git log --oneline --graph --decorate > git reset HEAD@{3} > git log --oneline --graph --decorate > git reflog (show history till 16 days)
git reset commit-id > git log --oneline --graph --decorate 
Browser > create test-branch > edit README.md file > ## Updates from Dev 1 (Commit Changes:Test commit to show changes) > Compare & Pull Request > Create Pull Request

===== Compare Branches via Command Line (19:49) =====
git clone paste clone URL > cd time-tracker > git branch -a > git pull origin master > git fetch origin test-branch > git branch test origin/test-branch
git checkout test > git pull > git diff master test > git checkout master > git branch -a > git branch -d test > git branch -a > git status

===== Stash vs Branch(27:03) =====
mate README.md > ## Test change > git ls-files > git stash > git config --global user.name "Training" > git config --global user.email "training@training" > git stash
git checkout -b test > git stash pop > git stash list > git checkout master > mate pom.xml > Testing this stash thingy > git status > git stash > git status 
mate LICENCE > Version 3.0 > git status > git stash > git stash list > git stash apply stash@{1} > git stash list > git stash clear > git stash list > git status

===== Gitting Help(38:10 - git help stash) =====
===== Cherry Pick(39:30) =====
git status > git commit -am "express updates of README and POM" > git checkout -b develop > cd web/ > mate pom.xml (paste) > git commit -am "my cherry pick commit"
<!--
Cherry Pick Me!
-->

cd .. > cd core/ > mate pom.xml > git commit -am "non-cherry picked commit" > git log --oneline > git checkout master > cd .. > cd web/ > mate pom.xml > git status
<!--
This is not Cherry Picked > 
-->

git log --oneline --graph > cd .. > mate pom.xml(paste) > git commit -am "Updates away from develop" > git log --oneline > git cherry-pick commit-id of my cherry 
<!--
Something there
-->
git status > cd web/ > mate pom.xml